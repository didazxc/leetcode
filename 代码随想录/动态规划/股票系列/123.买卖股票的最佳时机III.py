"""
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入：prices = [3,3,5,0,0,3,1,4]

输出：6 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3。

示例 2：

输入：prices = [1,2,3,4,5]

输出：4 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

示例 3：

输入：prices = [7,6,4,3,1]

输出：0 解释：在这个情况下, 没有交易完成, 所以最大利润为0。

示例 4：

输入：prices = [1] 输出：0

提示：

1 <= prices.length <= 10^5
0 <= prices[i] <= 10^5
"""


def stock0(prices):
    dp = [[0, 0, 0, 0] for _ in range(len(prices))]

    dp[0] = [-prices[0], 0, -prices[0], 0]

    for i in range(1, len(prices)):
        dp[i][0] = max(dp[i-1][0], -prices[i])  # 选择哪一天为起点，每次手上现金都从0开始
        dp[i][1] = max(dp[i-1][1], dp[i-1][0] + prices[i])
        dp[i][2] = max(dp[i-1][2], dp[i-1][1] - prices[i])  # 第二次持有股票，初始值假定第一天已经是第二次购入（最多两次，最少可以不买），之后在第一次售出的现金基础上进行操作
        dp[i][3] = max(dp[i-1][3], dp[i-1][2] + prices[i])

    return dp[-1][3]


def stock(prices):
    dp = [-float('inf'), 0, -float('inf'), 0]

    for price in prices:
        dp[0] = max(dp[0], -price)
        dp[1] = max(dp[1], dp[0] + price)  # 包含了”当天买入，当天卖出“的情况
        dp[2] = max(dp[2], dp[1] - price)
        dp[3] = max(dp[3], dp[2] + price)

    return dp[-1]


if __name__ == '__main__':
    print(stock([3,3,5,0,0,3,1,4]))
    print(stock([1,2,3,4,5]))
    print(stock([7,6,4,3,1]))

